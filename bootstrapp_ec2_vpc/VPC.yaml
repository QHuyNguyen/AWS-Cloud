Resources:
  #Create EC2 Instance
  WordpressInstance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref WebSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      ImageId: ami-0ed9277fb7eb570c9
      InstanceType: t2.micro
      KeyName: A4L
      Tags:
        - Key: Name
          Value: Custom-PublicEC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Setpassword & DB Variables
          DBName='a4lwordpress'
          DBUser='a4lwordpress'
          DBPassword='REPLACEME'
          DBRootPassword='REPLACEME'

          # System Updates
          yum -y update
          yum -y upgrade
          # STEP 2 - Install system software - including Web and DB
          yum install -y mariadb-server httpd wget cowsay
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          # STEP 3 - Web and DB Servers Online - and set to startup
          systemctl enable httpd
          systemctl enable mariadb
          systemctl start httpd
          systemctl start mariadb
          # STEP 4 - Set Mariadb Root Password
          mysqladmin -u root password $DBRootPassword
          # STEP 5 - Install Wordpress
          wget http://wordpress.org/latest.tar.gz -P /var/www/html
          cd /var/www/html
          tar -zxvf latest.tar.gz
          cp -rvf wordpress/* .
          rm -R wordpress
          rm latest.tar.gz
          # STEP 6 - Configure Wordpress
          cp ./wp-config-sample.php ./wp-config.php
          sed -i "s/'database_name_here'/'$DBName'/g" wp-config.php
          sed -i "s/'username_here'/'$DBUser'/g" wp-config.php
          sed -i "s/'password_here'/'$DBPassword'/g" wp-config.php
          # Step 6a - permissions
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          # STEP 7 Create Wordpress DB
          echo "CREATE DATABASE $DBName;" >> /tmp/db.setup
          echo "CREATE USER '$DBUser'@'localhost' IDENTIFIED BY '$DBPassword';" >> /tmp/db.setup
          echo "GRANT ALL ON $DBName.* TO '$DBUser'@'localhost';" >> /tmp/db.setup
          echo "FLUSH PRIVILEGES;" >> /tmp/db.setup
          mysql -u root --password=$DBRootPassword < /tmp/db.setup
          sudo rm /tmp/db.setup
          # STEP 8 COWSAY
          echo "#!/bin/sh" > /etc/update-motd.d/40-cow
          echo 'cowsay "Amazon Linux 2 AMI - Animals4Life"' >> /etc/update-motd.d/40-cow
          chmod 755 /etc/update-motd.d/40-cow
          rm /etc/update-motd.d/30-banner
          update-motd
  #Create a Custom VPC
  ProdVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames: true
      EnableDnsSupport: true
      CidrBlock: 10.16.0.0/16
      Tags:
        - Key: Name
          Value: test-vpc
  IPV6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref ProdVPC
      AmazonProvidedIpv6CidrBlock: true
  #Create a internet gateway and attach to ProdVPC
  ProdVPCInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: test-igw
  #InternetGatewayAttachment depend on IGW and VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref ProdVPCInternetGateway
      VpcId: !Ref ProdVPC
  #Create Routetable for VPC
  ProdVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: production-vpc-routetable
      VpcId: !Ref ProdVPC
  #Create a route in a route table of prodVPC
  ProdVPCRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ProdVPCInternetGateway
      RouteTableId: !Ref ProdVPCRouteTable
  #Associate a web subnet with route table
  RouteTableAssociationWeb:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ProdVPCRouteTable
      SubnetId: !Ref WebSubnet
  #Create subnet for VPC
  WebSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.16.0.0/18
      VpcId: !Ref ProdVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sn-web
  AppSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.16.64.0/18
      VpcId: !Ref ProdVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: sn-app
  DBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.16.128.0/18
      VpcId: !Ref ProdVPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: sn-db
  ReservedSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.16.192.0/18
      VpcId: !Ref ProdVPC
      AvailabilityZone: !Select [ 3, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: sn-reserved
  #Create a security group for web subnet instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22 IPv4 & v6
      VpcId: !Ref ProdVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          Description: Allow SSH IPv4 IN
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          Description: Allow HTTP IN